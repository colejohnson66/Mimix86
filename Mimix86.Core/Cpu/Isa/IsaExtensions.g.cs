// generated by `Mimix86.Generators.Opcodes.OpcodesGenerator`
// any changes will be lost on next generation

using Mimix86.Core.Cpu.Decoder;
using Mimix86.Core.Cpu.Decoder.OpcodeMap;
using Mimix86.Core.Cpu.Execution;

namespace Mimix86.Core.Cpu.Isa;

/// <summary>
/// Contains the various ISA extensions that can be registered.
/// </summary>
public static class IsaExtensions
{
    /// <summary>
    /// The instructions added with the original 8086.
    /// Undefined instructions are available with <see cref="I8086Undefined" />.
    /// </summary>
    public static IsaExtension I8086 { get; } = new()
    {
        OpcodeMapEntries =
        {
            [new(OpcodeMaps.OneByte, 0x26)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.SegmentES),
            }),
            [new(OpcodeMaps.OneByte, 0x2E)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.SegmentCS),
            }),
            [new(OpcodeMaps.OneByte, 0x36)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.SegmentSS),
            }),
            [new(OpcodeMaps.OneByte, 0x3E)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.SegmentDS),
            }),
            [new(OpcodeMaps.OneByte, 0xF0)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.Lock),
            }),
            [new(OpcodeMaps.OneByte, 0xF2)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.Repne),
            }),
            [new(OpcodeMaps.OneByte, 0xF3)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.RepRepe),
            }),
        },
        // OpcodeMapFlags = new()
        // OpcodeMapEntries = new()
    };

    /// <summary>
    /// The undefined instructions available in the 8086.
    /// </summary>
    public static IsaExtension I8086Undefined { get; } = new()
    {
        OpcodeMapEntries =
        {
            [new(OpcodeMaps.OneByte, 0xF1)] = (OpmapCellFlags.None, new()
            {
                new(Prefixes.Lock),
            }),
        },
        // OpcodeMapFlags = new()
        // OpcodeMapEntries = new()
    };
}
