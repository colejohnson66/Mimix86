/* =============================================================================
 * File:   IsaExtensionGenerator.cs
 * Author: Cole Tobin
 * =============================================================================
 * Copyright (c) 2023 Cole Tobin
 *
 * This file is part of Mimix86.
 *
 * Mimix86 is free software: you can redistribute it and/or modify it under the
 *   terms of the GNU General Public License as published by the Free Software
 *   Foundation, either version 3 of the License, or (at your option) any later
 *   version.
 *
 * Mimix86 is distributed in the hope that it will be useful, but WITHOUT ANY
 *   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *   FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 *   details.
 *
 * You should have received a copy of the GNU General Public License along with
 *   Mimix86. If not, see <http://www.gnu.org/licenses/>.
 * =============================================================================
 */

using DslLib;
using System.IO;

namespace Mimix86.Generators.IsaExtension;

public static class IsaExtensionGenerator
{
    private const string FILE_TEMPLATE_HEADER =
        $$"""
        // generated by `{{nameof(Mimix86)}}.{{nameof(Generators)}}.{{nameof(IsaExtension)}}.{{nameof(IsaExtensionGenerator)}}`
        // any changes will be lost on next generation

        namespace Mimix86.Core.Cpu;

        public readonly partial struct IsaExtension
        {
        """;

    /* CpuLevel0 "Instructions present since the 8086"
     *      |
     *      v
     * /// <summary>Instructions present since the 8086</summary>
     * public static IsaExtension CpuLevel0 { get; } = new(0);
     */

    public static void Run()
    {
        string contents = File.ReadAllText("./Data/IsaExtension/List.m86");
        using Parser parser = new(contents);

        string outputPath = Path.Combine(Helpers.Mimix86CorePath, "Cpu", "IsaExtension.StaticFields.g.cs");
        using FileStream handle = File.Open(outputPath, FileMode.Create, FileAccess.Write);
        using StreamWriter writer = new(handle);

        int bitIndex = 0;
        writer.Write(FILE_TEMPLATE_HEADER);
        foreach (Node node in parser.Parse())
        {
            // first child is the name
            // second child is the description
            Node[] children = node.Children!;
            string name = children[0].Text!;
            string description = children[1].Text!;

            writer.WriteLine();
            writer.WriteLine($"    /// <summary>{description}</summary>");
            writer.WriteLine($"    public static IsaExtension {name} {{ get; }} = new({bitIndex});");

            bitIndex++;
        }
        writer.WriteLine("}");
    }
}
