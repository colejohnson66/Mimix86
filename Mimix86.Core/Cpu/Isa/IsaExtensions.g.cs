// generated by `Mimix86.Generators.Opcodes.OpcodesGenerator`
// any changes will be lost on next generation

using Mimix86.Core.Cpu.Decoder;
using Mimix86.Core.Cpu.Decoder.OpcodeMap;
using Mimix86.Core.Cpu.Execution;

namespace Mimix86.Core.Cpu.Isa;

/// <summary>
/// Contains the various ISA extensions that can be registered.
/// </summary>
public static class IsaExtensions
{
    /// <summary>
    /// The instructions added with the original 8086.
    /// Undefined instructions are available with <see cref="I8086Undefined" />.
    /// </summary>
    public static IsaExtension I8086 { get; } = new()
    {
        Prefixes = new()
        {
            [new(OpcodeMaps.OneByte, 0x26)] = Prefixes.SegmentES,
            [new(OpcodeMaps.OneByte, 0x2e)] = Prefixes.SegmentCS,
            [new(OpcodeMaps.OneByte, 0x36)] = Prefixes.SegmentSS,
            [new(OpcodeMaps.OneByte, 0x3e)] = Prefixes.SegmentDS,
            [new(OpcodeMaps.OneByte, 0xf0)] = Prefixes.Lock,
            [new(OpcodeMaps.OneByte, 0xf2)] = Prefixes.Repne,
            [new(OpcodeMaps.OneByte, 0xf3)] = Prefixes.RepRepe,
        },
        // OpcodeMapFlags = new()
        // OpcodeMapEntries = new()
    };

    /// <summary>
    /// The undefined instructions available in the 8086.
    /// </summary>
    public static IsaExtension I8086Undefined { get; } = new()
    {
        Prefixes = new()
        {
            [new(OpcodeMaps.OneByte, 0xf1)] = Prefixes.Lock,
        },
        // OpcodeMapFlags = new()
        // OpcodeMapEntries = new()
    };
}
